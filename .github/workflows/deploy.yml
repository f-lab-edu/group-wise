name: Deploy to EC2

on:
  push:
    branches:
      [main , group-wise-*]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 에 올린 소스코드 가져오기
        uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: 테스트 및 빌드
        env:
          SPRING_PROFILES_ACTIVE: test
#          DB_HOST: ${{ secrets.DB_HOST }}
#          DB_NAME_PROD: ${{ secrets.DB_NAME_PROD }}
#          DB_NAME_TEST: ${{ secrets.DB_NAME_TEST }}
#          DB_USERNAME: ${{ secrets.DB_USERNAME }}
#          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: ./gradlew clean build

      - name: github actions 아티팩트로 jar 업로드
        uses: actions/upload-artifact@v4   # GitHub Actions의 작업(job) 간에 전달하기 위해 사용
        with:
          name: app-jar           # 아티팩트 이름 (식별자로 사용)
          path: build/libs/*.jar  # 업로드할 파일 경로

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: github actions 아티팩트에서 jar 다운로드
        uses: actions/download-artifact@v4
        with:
          name: app-jar            # 다운로드할 아티팩트 이름 (upload-artifact에서 설정한 이름)
          path: .                  # 다운로드할 경로 (현재 디렉토리)

      - name: EC2로 배포 준비하기
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 배포 디렉토리 설정
            DEPLOY_DIR=/home/ubuntu/group-wise
            BACKUP_DIR=$DEPLOY_DIR/backup
            LOG_DIR=$DEPLOY_DIR/logs
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            
            # 디렉토리 준비
            mkdir -p $BACKUP_DIR
            mkdir -p $LOG_DIR
            
            # 현재 실행중인 애플리케이션 백업
            if [ -f $DEPLOY_DIR/app.jar ]; then
              cp $DEPLOY_DIR/app.jar $BACKUP_DIR/app-$TIMESTAMP.jar
            fi
            
            # 애플리케이션 중지
            sudo fuser -k -n tcp 8080 || true

      - name: SCP 로 EC2에 빌드된 JAR 파일 전송하기
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "*.jar"
          target: "/home/ubuntu/group-wise"

      - name: EC2에서 애플리케이션 실행하기
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/group-wise

            # 새 JAR 파일 이름 변경
            mv *SNAPSHOT.jar app.jar

            # 환경 변수 설정
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_NAME_PROD=${{ secrets.DB_NAME_PROD }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}

            # 애플리케이션 실행
            nohup java -jar app.jar > ./logs/application-$(date +%Y%m%d).log 2>&1 &

            # 애플리케이션 시작을 최대 2분(120초) 동안 대기
            MAX_WAIT=120
            WAIT_COUNT=0
            echo "Waiting for application to start..."
            while ! nc -z localhost 8080 && [ $WAIT_COUNT -lt $MAX_WAIT ]; do
              sleep 5
              WAIT_COUNT=$((WAIT_COUNT+5))
              echo "Still waiting... ($WAIT_COUNT seconds elapsed)"
            done
            
            # 프로세스 확인
            if [ $WAIT_COUNT -ge $MAX_WAIT ]; then
              echo "Application failed to start within $MAX_WAIT seconds!"
            
              # 프로세스 실행 여부 확인
              if ! pgrep -f "java -jar app.jar" > /dev/null; then
                echo "Application failed to start. Rolling back..."
                sudo fuser -k -n tcp 8080 || true
              
                # 백업에서 복원
                LATEST_BACKUP=$(ls -t $BACKUP_DIR/app-*.jar | head -1)
                if [ -n "$LATEST_BACKUP" ]; then
                  cp $LATEST_BACKUP app.jar
                  nohup java -jar app.jar > ./logs/application-rollback-$(date +%Y%m%d).log 2>&1 &
                  echo "Rolled back to previous version"
                else
                  echo "No backup available for rollback"
                fi
                
                exit 1
              fi
            fi
            
            echo "Deployment successful!"